generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now()) @map("create_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  email        String    @unique
  password     String
  name         String    @default("No name")
  avatarPath   String    @default("/uploads/default-avatar.png") @map("avatar_path")
  role         UserRole  @default(USER)
  isHasPremium Boolean   @default(false) @map("is_has_premium")
  favorites    Movie[]
  payments     Payment[]
  reviews      Review[]

  @@map("user")
}

model Movie {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String
  description String
  slug      String   @unique
  poster    String
  bigPoster String   @map("big_poster")
  year      Int      @default(0)
  duration  Int      @default(0)
  country    String   @default("")
  views     Int      @default(0)
  videoUrls  String[]   @map("video_urls")
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  reviews   Review[]
  actors    Actor[]  @relation("ActorToMovie")
  genres    Genre[]  @relation("GenreToMovie")

  @@map("movie")
}

model Genre {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("create_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String
  slug        String   @unique
  description String
  icon        String
  movies      Movie[]  @relation("GenreToMovie")

  @@map("genre")
}

model Actor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  slug      String   @unique
  photoUrl  String   @map("photo_url")
  movies    Movie[]  @relation("ActorToMovie")

  @@map("actor")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int
  text      String
  userId    String?  @map("user_id")
  movieId   String?  @map("movie_id")
  movie     Movie?   @relation(fields: [movieId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("review")
}

model Payment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @map("create_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  status    PaymentStatus @default(PENDING)
  amount    Float         @default(0)
  userId    String?       @map("user_id")
  user      User?         @relation(fields: [userId], references: [id])
  paymentUrl String? @map("payment_url")

  @@map("payment")
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  PAYED
}
